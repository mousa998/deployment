{"version":3,"sources":["base/_mixins.scss","pages/service.scss","pages/service.css"],"names":[],"mappings":"AAkBA,8DAAA;AA+BE;EC9CF;IAEI,mCAAA;IAAA,2BAAA;ECDF;AACF;;ADKE;EACE,2BAAA,EAAA,qBAAA;ACFJ;ADKE;EACE,oCAAA,EAAA,kDAAA;ACHJ;ADME;EACE,oCAAA,EAAA,sBAAA;EACA,WAAA,EAAA,oBAAA;EACA,YAAA;EACA,kBAAA;EACA,cAAA;ACJJ","file":"pages/service.css","sourcesContent":["@import \"./functions\";\r\n@import \"./vars\";\r\n\r\n// font sizes with clamp\r\n@mixin fs-fluid($min-vw, $max-vw, $min-value, $max-value) {\r\n  $factor: math.div(1, ($max-vw - $min-vw)) * ($max-value - $min-value);\r\n  $calc-value: unquote(\r\n    \"#{ $min-value - ($min-vw * $factor) } + #{ 100vw * $factor }\"\r\n  );\r\n\r\n  font-size: $min-value; // Fallback for older browsers\r\n  font-size: clamp(\r\n    #{if($min-value > $max-value, $max-value, $min-value)},\r\n    #{$calc-value},\r\n    #{if($min-value > $max-value, $min-value, $max-value)}\r\n  );\r\n}\r\n\r\n/* !!!: to set how many rows to show in element before clamp */\r\n@mixin line-clamp($lines) {\r\n  display: -webkit-box;\r\n  -webkit-line-clamp: $lines;\r\n  -webkit-box-orient: vertical;\r\n  overflow: hidden;\r\n}\r\n\r\n// layout breakpoints query\r\n\r\n$query-breakpoints: (\r\n  \"xs\": em(0),\r\n  \"sm\": em(576),\r\n  \"md\": em(768),\r\n  \"lg\": em(992),\r\n  \"tab\": em(1024),\r\n  \"xl\": em(1200),\r\n  \"xxl\": em(1440),\r\n);\r\n\r\n// Function to get breakpoint value (supports either key or pixel value)\r\n@function get-breakpoint-value($size) {\r\n  @if map-has-key($query-breakpoints, $size) {\r\n    @return map-get($query-breakpoints, $size);\r\n  }\r\n  @return em(\r\n    $size\r\n  ); // Assumes it's a pixel or other direct unit value if not in the map\r\n}\r\n\r\n@mixin breakpoint($size) {\r\n  @media (width >= map-get($query-breakpoints, $size)) {\r\n    @content;\r\n  }\r\n}\r\n\r\n@mixin breakpoint-down($size) {\r\n  @media (width < map-get($query-breakpoints, $size)) {\r\n    @content;\r\n  }\r\n}\r\n\r\n@mixin breakpoint-range($min-size, $max-size) {\r\n  @media (min-width: map-get($query-breakpoints, $min-size)) and (max-width: map-get($query-breakpoints, $max-size)) {\r\n    @content;\r\n  }\r\n}\r\n\r\n@mixin minMedia($width) {\r\n  @media all and (min-width: $width) {\r\n    @content;\r\n  }\r\n}\r\n\r\n@mixin maxMedia($width) {\r\n  @media all and (max-width: $width) {\r\n    @content;\r\n  }\r\n}\r\n\r\n@mixin xxl {\r\n  // XX-Large devices (larger desktops, 1400px and up)\r\n  @media (min-width: 1400px) {\r\n    & {\r\n      @content;\r\n    }\r\n  }\r\n}\r\n\r\n@mixin xl {\r\n  // X-Large devices (large desktops, 1200px and up)\r\n  @media (min-width: 1200px) {\r\n    & {\r\n      @content;\r\n    }\r\n  }\r\n}\r\n\r\n@mixin lg {\r\n  // X-Large devices (large desktops, 1200px and up)\r\n  @media (min-width: 992px) {\r\n    & {\r\n      @content;\r\n    }\r\n  }\r\n}\r\n\r\n@mixin md {\r\n  @media (min-width: 768px) {\r\n    & {\r\n      @content;\r\n    }\r\n  }\r\n}\r\n\r\n@mixin sm {\r\n  // Small devices (landscape phones, 576px and up)\r\n  @media (min-width: 576px) {\r\n    & {\r\n      @content;\r\n    }\r\n  }\r\n}\r\n\r\n@mixin ipad {\r\n  // Small devices (landscape phones, 576px and up)\r\n  @media (max-width: 1199px) {\r\n    & {\r\n      @content;\r\n    }\r\n  }\r\n}\r\n\r\n@mixin mobile {\r\n  // Small devices (landscape phones, 576px and up)\r\n  @media (max-width: 991px) {\r\n    & {\r\n      @content;\r\n    }\r\n  }\r\n}\r\n\r\n@mixin mobile-767 {\r\n  // Small devices (landscape phones, 576px and up)\r\n  @media (max-width: 767px) {\r\n    & {\r\n      @content;\r\n    }\r\n  }\r\n}\r\n\r\n@mixin mobile-575 {\r\n  // Small devices (landscape phones, 576px and up)\r\n  @media (max-width: 575px) {\r\n    & {\r\n      @content;\r\n    }\r\n  }\r\n}\r\n\r\n// layout direction\r\n\r\n@mixin rtl {\r\n  html[dir=\"rtl\"] & {\r\n    @content;\r\n  }\r\n}\r\n\r\n@mixin ltr {\r\n  html[dir=\"ltr\"] & {\r\n    @content;\r\n  }\r\n}\r\n\r\n// themes\r\n@mixin themed() {\r\n  @each $theme, $map in $themes {\r\n    [data-bs-theme=\"#{$theme}\"] & {\r\n      $theme-map: () !global;\r\n      @each $key, $submap in $map {\r\n        $value: map-get(map-get($themes, $theme), \"#{$key}\");\r\n        $theme-map: map-merge(\r\n          $theme-map,\r\n          (\r\n            $key: $value,\r\n          )\r\n        ) !global;\r\n      }\r\n      @content;\r\n      $theme-map: null !global;\r\n    }\r\n  }\r\n}\r\n\r\n@mixin themed-vars() {\r\n  @each $theme, $map in $themes-vars {\r\n    [data-bs-theme=\"#{$theme}\"] & {\r\n      $theme-map: () !global;\r\n      @each $key, $submap in $map {\r\n        $value: map-get(map-get($themes-vars, $theme), \"#{$key}\");\r\n        $theme-map: map-merge(\r\n          $theme-map,\r\n          (\r\n            $key: $value,\r\n          )\r\n        ) !global;\r\n      }\r\n      @content;\r\n      $theme-map: null !global;\r\n    }\r\n  }\r\n}\r\n\r\n@mixin theme($theme) {\r\n  [data-bs-theme=\"#{theme}\"] & {\r\n    @content;\r\n  }\r\n}\r\n\r\n@mixin color-mode($mode: light, $root: false) {\r\n  @if $color-mode-type == \"media-query\" {\r\n    @if $root == true {\r\n      @media (prefers-color-scheme: $mode) {\r\n        :root {\r\n          @content;\r\n        }\r\n      }\r\n    } @else {\r\n      @media (prefers-color-scheme: $mode) {\r\n        @content;\r\n      }\r\n    }\r\n  } @else {\r\n    [data-bs-theme=\"#{$mode}\"] {\r\n      @content;\r\n    }\r\n  }\r\n}\r\n\r\n@mixin hexRGBA($hexcolor, $opacity) {\r\n  background-color: $hexcolor;\r\n  background-color: rgba($hexcolor, $opacity);\r\n}\r\n","@import \"../base/mixins\";\r\n@import \"../base/vars\";\r\n\r\n.service-sidebar {\r\n  @include breakpoint(lg) {\r\n    transform: translateY(-41%);\r\n  }\r\n}\r\n\r\n.services-owl {\r\n  .owl-dots {\r\n    margin-top: 25px !important; /* adjust as needed */\r\n  }\r\n\r\n  .owl-dot.active span {\r\n    background-color: $green-600 !important; /* Bootstrap primary color or any color you want */\r\n  }\r\n\r\n  .owl-dot span {\r\n    background-color: $gray-200 !important; /* default dot color */\r\n    width: 12px; /* size of the dot */\r\n    height: 12px;\r\n    border-radius: 50%;\r\n    display: block;\r\n  }\r\n}\r\n","/* !!!: to set how many rows to show in element before clamp */\n@media (width >= 62em) {\n  .service-sidebar {\n    transform: translateY(-41%);\n  }\n}\n\n.services-owl .owl-dots {\n  margin-top: 25px !important; /* adjust as needed */\n}\n.services-owl .owl-dot.active span {\n  background-color: #1b8354 !important; /* Bootstrap primary color or any color you want */\n}\n.services-owl .owl-dot span {\n  background-color: #e5e7eb !important; /* default dot color */\n  width: 12px; /* size of the dot */\n  height: 12px;\n  border-radius: 50%;\n  display: block;\n}"]}